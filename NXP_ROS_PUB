#!/usr/bin/env python

import socket
import struct
from time import sleep

import rospy
from geometry_msgs.msg import Pose


host = "192.168.1.33"  # ESP32 IP in the local network
port = 80              # ESP32 Server Port
array_size = 28        # Size of the byte array to receive (assuming 1 float)

def connect_socket():
    sock = socket.socket()
    sock.settimeout(1)  # Set a timeout of 1 second for socket operations

    try:
        sock.connect((host, port))
        return sock
    except socket.timeout:
        print("Connection timed out.")
    except socket.error as e:
        print("Socket error:", str(e))

    return None



def BNO_Pub():

    pub = rospy.Publisher('nxp_data', Pose, queue_size=10) 

    rospy.init_node('nxp_pub')

    #rate = rospy.Rate(1000000000000000) # 10 Hz loop will run 10 times per second to much
    rate = rospy.Rate(5) # 10 Hz loop will run 10 times per second

    
    while not rospy.is_shutdown() :

        # Initial connection attempt
        sock = connect_socket()

        if sock is not None:
            data = bytearray()
            try:
                while True:
                    message = b"0"
                    sock.send(message)

                    rev_message = sock.recv(array_size)
                    data.extend(rev_message)

                    if len(data) >= array_size:
                        values_tuple = struct.unpack('fffffff', data[:array_size])
                        
                        accel = Pose()
                        accel.position.x = values_tuple[0]
                        accel.position.y = values_tuple[1]
                        accel.position.z = values_tuple[2]
                        accel.orientation.w = values_tuple[3]
                        accel.orientation.x = values_tuple[4]
                        accel.orientation.y = values_tuple[5]
                        accel.orientation.z = values_tuple[6]
                        pub.publish(accel)

                        print("Received values:", accel)
                        data = data[array_size:]  # Remove the processed portion from the data array

                    sleep(0.001)  # Delay between iterations

            except socket.timeout:
                print("Socket timed out while receiving data.")
                sleep(0.001)
                connect_socket()
            except socket.error as e:
                print("Socket error:", str(e))
                sleep(0.001)
                connect_socket()

            sock.close()
    rate.sleep() # shutdown Ros according to rate in rospy.Rate()




if __name__ == '__main__':
    try:
        BNO_Pub()
        

    except rospy.ROSInterruptException:
        pass
